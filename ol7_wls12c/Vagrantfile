# -*- mode: ruby -*-
# vi: set ft=ruby :
BOX_NAME="makker/ol77SwGUIv1.1"
BOX_VERSION = "1"
#BOX_URL="file://../boxes/OL75v1.0.box"
VM_NAME="OL7U7_wls12c" 
VM_MEMORY = 12288 # 12*1024 MB
#VM_MEMORY = 8192 # 8*1024 MB
VM_CPUS=4
VM_GUI=false
#VM_GUI=true
VMS_HOME="c:/data/VirtualMachines/VirtualBox"
#VMS_HOME="d:/VirtualMachines/VirtualBox"
VM_MACHINE_NAME="darwin-wls12c"   
VM_DISK2=VMS_HOME+"/"+VM_NAME+"/"+VM_NAME+".disk2.vdi"
VM_DISK2_SIZE=1024 * 512
# Stage folders
STAGE_HOST_FOLDER="c:/Data/git/makker/vagrant/Stage"
STAGE_GUEST_FOLDER="/media/sf_Stage"
# Project folders
PROJECT_HOST_FOLDER="c:/Data/git/makker"
PROJECT_GUEST_FOLDER="/media/sf_Projects"
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = BOX_NAME
  config.vm.box_version = BOX_VERSION
#  config.vm.box_url=BOX_URL
  config.vm.define VM_MACHINE_NAME
  config.vm.provider :virtualbox do |vb|
    vb.name = VM_NAME
    vb.gui = VM_GUI
    vb.memory = VM_MEMORY
    vb.cpus = VM_CPUS
    # Set clipboard and drag&drop bidirectional
    vb.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"]
    vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
    # Create a disk  
    unless File.exist?(VM_DISK2)
      vb.customize [ "createmedium", "disk", "--filename", VM_DISK2, "--format", "vdi", "--size", VM_DISK2_SIZE , "--variant", "Standard" ]
    end
    # Add it to the VM.
    vb.customize [ "storageattach", :id , "--storagectl", "SATA", "--port", "2", "--device", "0", "--type", "hdd", "--medium", VM_DISK2]
  end
  #config.ssh.username="darwin"
  config.ssh.username="vagrant"
  config.ssh.password="vagrant"
  #Base Mac address.
  #config.vm.base_mac="080027126D17"
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder STAGE_HOST_FOLDER, STAGE_GUEST_FOLDER
  config.vm.synced_folder PROJECT_HOST_FOLDER, PROJECT_GUEST_FOLDER
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  #
  # Linux Initialisation
  $initScript = <<-SCRIPT
    export SCRIPT_HOME=/media/sf_Stage/commonScripts/linux
    echo _______________________________________________________________________________
    echo 0. Prepare Oracle Linux
    $SCRIPT_HOME/ol7/0.PrepOEL.sh
    echo _______________________________________________________________________________
    echo 1. Create Filesystem
    $SCRIPT_HOME/ol7/1.FileSystem.sh
    echo _______________________________________________________________________________
    echo 2. Create Oracle User
    $SCRIPT_HOME/ol7/2.MakeOracleUser.sh
  SCRIPT
  # Install Java 8
  $installJava8Script = <<-SCRIPT
    echo _______________________________________________________________________________
    echo Java SDK 8
    sudo runuser -l oracle -c /media/sf_Stage/commonScripts/oracle/java/jdk8/installJava8.sh
  SCRIPT
  # Install Database
  $installDB121Script = <<-SCRIPT
    echo _______________________________________________________________________________
    echo Database 12c
    sudo runuser -l oracle -c '/media/sf_Stage/commonScripts/oracle/db/12.1/installDB.sh'
  SCRIPT
  # Start Database  
  $startDBScript = <<-SCRIPT
    echo _______________________________________________________________________________
    echo Start Database   
    sudo runuser -l oracle -c '/home/oracle/bin/startDB.sh'
  SCRIPT
  # Install SQLDeveloper
  $installSqlDevScript = <<-SCRIPT
    # echo _______________________________________________________________________________
    # echo SQLCL and SQLDeveloper
    # sudo runuser -l oracle -c '/media/sf_Stage/commonScripts/oracle/db/sqldev/installSqlcl.sh'
    echo _______________________________________________________________________________
    echo SQLDeveloper
    sudo runuser -l oracle -c '/media/sf_Stage/commonScripts/oracle/db/sqldev/installSqlDeveloper.sh'
  SCRIPT
  # Install WLS12c
  $installWls12cScript = <<-SCRIPT
    echo ______________________________________________________________________________
    echo Install WLS 12c
    sudo runuser -l oracle -c '/media/sf_Stage/commonScripts/oracle/fmw/12.2.1.3/wls/installWLS.sh'
  SCRIPT
  # Install JDeveloper
  $installJdev12cScript = <<-SCRIPT
	  echo ______________________________________________________________________________
    echo Install Jdeveloper 12c
    sudo runuser -l oracle -c '/media/sf_Stage/commonScripts/oracle/fmw/12.2.1.3/jdeveloper/installJdev.sh'
  SCRIPT
  # Install OpenDJ
  $installOpenDJScript = <<-SCRIPT
    echo ______________________________________________________________________________
    echo "Install OpenDJ 3.0.0 (For WLS12c Advanced Admin training)"
    sudo runuser -l oracle -c '/media/sf_Stage/commonScripts/opensource/OpenDJ/installOpenDJ.sh'
  SCRIPT
  # Install Confluent Kafka
  $installKafkaScript = <<-SCRIPT
    echo ______________________________________________________________________________
    echo "Install Kafka (Confluent 5.0.0)"
    sudo runuser -l oracle -c '/media/sf_Stage/commonScripts/opensource/confluent/installKafka.sh'
  SCRIPT
  #
  # BPM Quickstart
  $installFMWSOAQSScript = <<-SCRIPT
    echo _______________________________________________________________________________
    echo Fusion Middleware - SOA Quickstart
    sudo runuser -l oracle -c '/media/sf_Stage/commonScripts/oracle/fmw/12.2.1.3/soaqs/installSOAQS.sh'
  SCRIPT
  #
  config.vm.provision "init", type: "shell", run: "once", inline: $initScript
  config.vm.provision "installJava8", type: "shell", run: "once", inline: $installJava8Script
  config.vm.provision "installDB12c", type: "shell", run: "once", inline: $installDB121Script
  config.vm.provision "startDB", type: "shell", run: "once", inline: $startDBScript
  config.vm.provision "installSQLDev", type: "shell", run: "once", inline: $installSqlDevScript
  config.vm.provision "installWLS12c", type: "shell", run: "once", inline: $installWls12cScript  
  #config.vm.provision "installJdev12c", type: "shell", run: "never", inline: $installJdev12cScript
  config.vm.provision "installOpenDJ", type: "shell", run: "once", inline: $installOpenDJScript
  #config.vm.provision "installKafka", type: "shell", run: "never", inline: $installKafkaScript
  #config.vm.provision "installFMWSOAQS", type: "shell", run: "never", inline: $installFMWSOAQSScript
end
