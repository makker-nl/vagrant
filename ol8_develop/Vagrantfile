# -*- mode: ruby -*-
# vi: set ft=ruby :
#
require 'yaml'
#
BOX_NAME="makker/OL8SwGUI"
#BOX_NAME="OL8SwGUI"
BOX_VERSION="7" # Oracle Linux 8 Update 7
#BOX_URL="file://c:/Data/Vagrant/boxes/OL8U7SwGUIv1.0.box"
#
# https://stackoverflow.com/questions/13065576/override-vagrant-configuration-settings-locally-per-dev
settings = YAML.load_file 'settings.yml'
provisioners = YAML.load_file 'provisioners.yml'
VM_NAME="OL8_Develop_v1"  
VM_HOST_NAME="oradevelop.oracle.local"
VM_MACHINE="oradevelop"
VM_MEMORY = settings['environment']['vmMemory']
VM_CPUS = settings['environment']['vmCpus']
VM_GUI = settings['environment']['vmGui']
VM_MONITOR_COUNT = settings['environment']['vmMonitorCount']
VMS_HOME = settings['environment']['vmsHome']
VM_STORAGE_CTRL="SATA"  
VM_DISK2=VMS_HOME+"/"+VM_NAME+"/"+VM_NAME+".disk2.vdi"
VM_DISK2_SIZE = settings['environment']['disks']['vmsDisk2Size']
# Shared folders
STAGE_HOST_FOLDER = settings['sharedFolders']['stageHostFolder']
STAGE_GUEST_FOLDER = settings['sharedFolders']['stageGuestFolder']
PROJECT_HOST_FOLDER = settings['sharedFolders']['projectHostFolder']
PROJECT_GUEST_FOLDER = settings['sharedFolders']['projectGuestFolder']
#
LOCAL_COMMON_SCRIPTS = "../Stage/commonScripts"
STAGE_COMMON_SCRIPTS = STAGE_GUEST_FOLDER+"/commonScripts"
RUN_AS_SCR=LOCAL_COMMON_SCRIPTS+'/runAs.sh'
#
# Provision generic.
def provision(vmconf, provisioner)
  keys =  provisioner.keys
  provisionerName = provisioner['name']
  description = provisioner['description']
  runAsUser = provisioner['user']
  runType = provisioner['run']
  if provisioner['commonScript'] then
    script = STAGE_COMMON_SCRIPTS+'/'+provisioner['commonScript']
  elsif provisioner['absoluteScript'] then
    script = provisioner['absoluteScript']
  end  
  vmconf.vm.provision provisionerName, type: "shell", run: runType, path: RUN_AS_SCR, args: [description, script, runAsUser]
end
#
# Provision docker
def vagrantProvisionDocker(vmconf, provisioner)
  provisionerName = provisioner['name']
  description = provisioner['description']
  runType = provisioner['run']
  runAsUser = provisioner['user']
  runType = provisioner['run']
  dockerUser = provisioner['docker_user']
  dockerPassword = provisioner['docker_password']
  scriptHome=STAGE_COMMON_SCRIPTS+'/opensource/docker' 
  script = LOCAL_COMMON_SCRIPTS+provisioner['commonScript']
  vmconf.vm.provision provisionerName, type: "shell", run: "never", run: runType, path: script, args: [description, scriptHome, runAsUser, dockerUser, dockerPassword]
end
#
# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = BOX_NAME
  config.vm.box_version = BOX_VERSION
  #config.vm.box_url=BOX_URL
  config.vm.hostname=VM_HOST_NAME
  config.vm.define VM_MACHINE
  config.vm.provider :virtualbox do |vb|
    vb.name=VM_NAME
    vb.gui=VM_GUI
    vb.memory=VM_MEMORY
    vb.cpus=VM_CPUS
	  #Pre-allocate the memory when starting the guest.
	  #vb.customize ["setextradata", :id, "VBoxInternal/RamPreAlloc", 1]
	  # Set clipboard and drag&drop bidirectional
	  vb.customize ["modifyvm", :id, "--clipboard-mode", "bidirectional"]
	  vb.customize ["modifyvm", :id, "--draganddrop", "bidirectional"]
    vb.customize ["modifyvm", :id, "--paravirtprovider", "default"] # none|default|legacy|minimal|hyperv|kvm
    vb.customize ["modifyvm", :id, "--hwvirtex", "on"] # on|off: Enables and disables the use of hardware virtualization extensions, such as Intel VT-x or AMD-V, in the processor of your host system.
    vb.customize ["modifyvm", :id, "--nestedpaging", "on"] #  on|off: If hardware virtualization is enabled, this additional setting enables or disables the use of the nested paging feature in the processor of your host system. See Hardware vs. Software Virtualization and CVE-2018-3646. 
    vb.customize ["modifyvm", :id, "--largepages", "on"] #   on|off: If hardware virtualization and nested paging are enabled, for Intel VT-x only, an additional performance improvement of up to 5% can be obtained by enabling this setting. This causes the hypervisor to use large pages to reduce TLB use and overhead.
    # Set number of monitors.
    vb.customize ["modifyvm", :id, "--monitorcount", VM_MONITOR_COUNT]
    # Create a disk  
    unless File.exist?(VM_DISK2)
      vb.customize [ "createmedium", "disk", "--filename", VM_DISK2, "--format", "vdi", "--size", VM_DISK2_SIZE , "--variant", "Standard" ]
    end
    # Add it to the VM.
    vb.customize [ "storageattach", :id , "--storagectl", VM_STORAGE_CTRL, "--port", "2", "--device", "0", "--type", "hdd", "--medium", VM_DISK2]
  end
  config.ssh.username="vagrant"
  config.ssh.password="vagrant"
  #Base Mac address.
  #config.vm.base_mac="080027126D17"
  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  config.vm.synced_folder STAGE_HOST_FOLDER, STAGE_GUEST_FOLDER
  config.vm.synced_folder PROJECT_HOST_FOLDER, PROJECT_GUEST_FOLDER
  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  #
  provision(config, provisioners['preplinux'])
  provision(config, provisioners['initfilesystem'])
  provision(config, provisioners['addoracleuser'])
  provision(config, provisioners['java11'])
  provision(config, provisioners['git'])
  provision(config, provisioners['oraclejava8'])
  provision(config, provisioners['oraclejava11'])
  provision(config, provisioners['python3'])
  provision(config, provisioners['maven'])
  provision(config, provisioners['eclipse'])
  vagrantProvisionDocker(config, provisioners['docker'])
  provision(config, provisioners['dockercompose'])
  provision(config, provisioners['soapui'])
  provision(config, provisioners['postman'])
  provision(config, provisioners['osoaqs'])
  provision(config, provisioners['kubectl'])
  provision(config, provisioners['helm'])
  provision(config, provisioners['azurecli'])
  provision(config, provisioners['tkncli'])
  provision(config, provisioners['yq'])  
  provision(config, provisioners['netbeans'])
  provision(config, provisioners['sqldeveloper'])
  provision(config, provisioners['nodejs'])  
end 